const TELEGRAM_BOT_TOKEN = 'xxxxxx:xxxxxxxxxxxxxxxxxxxxxxxxx';

// Function to serve the web app
function doGet() {
  return HtmlService.createHtmlOutputFromFile('index')
    .setTitle('Deadline Monitoring Dashboard')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

// Original checkDeadlines_3 function, updated for new column
function checkDeadlines_3() {
  Logger.log('B·∫Øt ƒë·∫ßu ch·∫°y checkDeadlines t·∫°i: ' + new Date().toLocaleString('vi-VN', {timeZone: 'Asia/Ho_Chi_Minh'}));
  
  var configSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Config');
  if (!configSheet) {
    Logger.log('L·ªñI: Sheet "Config" kh√¥ng t·ªìn t·∫°i.');
    return;
  }
  
  var data = configSheet.getDataRange().getValues();
  Logger.log('ƒê√£ ƒë·ªçc ' + (data.length - 1) + ' h√†ng t·ª´ sheet Config.');
  
  var today = new Date();
  today.setHours(0, 0, 0, 0); // ƒê·∫∑t v·ªÅ ƒë·∫ßu ng√†y
  Logger.log('Ng√†y hi·ªán t·∫°i: ' + Utilities.formatDate(today, 'GMT+7', 'yyyy-MM-dd'));
  
  for (var i = 1; i < data.length; i++) { // B·∫Øt ƒë·∫ßu t·ª´ h√†ng 2
    var row = data[i];
    var fileId = row[1].trim();
    var sheetName = row[3].trim() || null;
    var taskNameColLetter = row[4].trim().toUpperCase();
    var startColLetter = row[5].trim().toUpperCase();
    var endColLetter = row[6].trim().toUpperCase();
    var statusColLetter = row[7].trim().toUpperCase();
    var recipients = row[8].trim().split(',').map(e => e.trim());
    var sendMethod = row[9].trim().toLowerCase() || 'email'; // M·∫∑c ƒë·ªãnh Email
    var maxAlerts = parseInt(row[10]) || 0;
    var beforeDays = parseInt(row[11]) || 0;
    var afterDays = parseInt(row[12]) || 0;
    var conditions = row[13].trim() || '';
    var status = row[14].trim() || 'ƒê√£ g·ª≠i: 0 l·∫ßn';
    var active = row[15].trim() || 'Yes';
    
    if (active !== 'Yes') {
      Logger.log('B·ªè qua h√†ng ' + (i + 1) + ': Kh√¥ng active.');
      continue;
    }
    
    Logger.log('X·ª≠ l√Ω h√†ng ' + (i + 1) + ': File ID = ' + fileId + ', Sheet = ' + (sheetName || 'Default') + ', Recipients = ' + recipients.join(', ') + ', Ph∆∞∆°ng th·ª©c = ' + sendMethod);
    
    if (!fileId) {
      Logger.log('B·ªè qua h√†ng ' + (i + 1) + ': Thi·∫øu File ID.');
      continue;
    }
    
    // Ki·ªÉm tra ph∆∞∆°ng th·ª©c g·ª≠i
    if (!['email', 'telegram', 'both'].includes(sendMethod)) {
      Logger.log('B·ªè qua h√†ng ' + (i + 1) + ': Ph∆∞∆°ng th·ª©c g·ª≠i kh√¥ng h·ª£p l·ªá (' + sendMethod + '). M·∫∑c ƒë·ªãnh d√πng Email.');
      sendMethod = 'email';
    }
    
    // Ki·ªÉm tra danh s√°ch email (cho Email ho·∫∑c Both)
    var validEmails = [];
    if (sendMethod === 'email' || sendMethod === 'both') {
      validEmails = recipients.filter(recipient => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(recipient));
      if (validEmails.length === 0) {
        Logger.log('C·∫£nh b√°o h√†ng ' + (i + 1) + ': Kh√¥ng c√≥ email h·ª£p l·ªá (' + recipients.join(', ') + ').');
      }
    }
    
    // Ki·ªÉm tra danh s√°ch Chat ID (cho Telegram ho·∫∑c Both)
    var validChatIds = [];
    if (sendMethod === 'telegram' || sendMethod === 'both') {
      validChatIds = recipients.filter(recipient => /^-?\d+$/.test(recipient));
      if (validChatIds.length === 0) {
        Logger.log('C·∫£nh b√°o h√†ng ' + (i + 1) + ': Kh√¥ng c√≥ Chat ID h·ª£p l·ªá (' + recipients.join(', ') + ').');
      }
    }
    
    // B·ªè qua n·∫øu kh√¥ng c√≥ email/Chat ID h·ª£p l·ªá khi c·∫ßn
    if ((sendMethod === 'email' && validEmails.length === 0) ||
        (sendMethod === 'telegram' && validChatIds.length === 0) ||
        (sendMethod === 'both' && validEmails.length === 0 && validChatIds.length === 0)) {
      Logger.log('B·ªè qua h√†ng ' + (i + 1) + ': Kh√¥ng c√≥ email ho·∫∑c Chat ID h·ª£p l·ªá ƒë·ªÉ g·ª≠i.');
      continue;
    }
    
    // Parse tr·∫°ng th√°i hi·ªán t·∫°i
    var sentCount = parseInt(status.match(/ƒê√£ g·ª≠i: (\d+) l·∫ßn/)?.[1] || 0);
    if (sentCount >= maxAlerts && maxAlerts > 0) {
      Logger.log('B·ªè qua h√†ng ' + (i + 1) + ': ƒê√£ g·ª≠i ƒë·ªß ' + maxAlerts + ' l·∫ßn.');
      continue;
    }
    
    try {
      var targetSpreadsheet = SpreadsheetApp.openById(fileId);
      Logger.log('M·ªü file th√†nh c√¥ng: ' + targetSpreadsheet.getName() + ' (ID: ' + fileId + ')');
      
      var targetSheet = sheetName ? targetSpreadsheet.getSheetByName(sheetName) : targetSpreadsheet.getSheets()[0];
      if (!targetSheet) {
        Logger.log('L·ªñI: Kh√¥ng t√¨m th·∫•y sheet ' + (sheetName || 'ƒë·∫ßu ti√™n') + ' trong file ' + fileId);
        continue;
      }
      Logger.log('ƒêang x·ª≠ l√Ω sheet: ' + targetSheet.getName());
      
      var targetData = targetSheet.getDataRange().getValues();
      Logger.log('ƒê√£ ƒë·ªçc ' + targetData.length + ' h√†ng t·ª´ sheet ' + targetSheet.getName());
      
      var taskNameColIndex = columnLetterToIndex(taskNameColLetter);
      var startColIndex = columnLetterToIndex(startColLetter);
      var endColIndex = columnLetterToIndex(endColLetter);
      var statusColIndex = statusColLetter ? columnLetterToIndex(statusColLetter) : 0;
      
      // Parse ƒëi·ªÅu ki·ªán th√™m
      var rowRange = parseRowRange(conditions);
      var skipConditions = parseConditions(conditions, 'B·ªè qua n·∫øu');
      var checkConditions = parseConditions(conditions, 'Ki·ªÉm tra n·∫øu');
      Logger.log('ƒêi·ªÅu ki·ªán: Ph·∫°m vi h√†ng ' + rowRange[0] + ' ƒë·∫øn ' + rowRange[1] + ', B·ªè qua = ' + JSON.stringify(skipConditions) + ', Ki·ªÉm tra = ' + JSON.stringify(checkConditions));
      
      var alerts = [];
      
      for (var j = (rowRange[0] - 1); j < Math.min(rowRange[1], targetData.length); j++) {
        var taskRow = targetData[j];
        var taskName = taskNameColIndex ? taskRow[taskNameColIndex - 1] || 'Task ·ªü h√†ng ' + (j + 1) : 'Task ·ªü h√†ng ' + (j + 1);
        var startDate = taskRow[startColIndex - 1];
        var endDate = taskRow[endColIndex - 1];
        var taskStatus = statusColIndex ? taskRow[statusColIndex - 1] : '';
        
        Logger.log('Ki·ªÉm tra h√†ng ' + (j + 1) + ': Task = ' + taskName + ', Status = ' + (taskStatus || 'N/A'));
        
        // B·ªè qua n·∫øu startDate ho·∫∑c endDate r·ªóng
        if (!startDate || !endDate) {
          Logger.log('B·ªè qua h√†ng ' + (j + 1) + ': Start Date ho·∫∑c End Date r·ªóng (Start: ' + startDate + ', End: ' + endDate + ')');
          continue;
        }
        
        // Ki·ªÉm tra ƒë·ªãnh d·∫°ng ng√†y
        function parseDate(str) {
        var parts = str.split('/');
        if (parts.length === 3) {
        // parts[0] = dd, parts[1] = mm, parts[2] = yy
        var day = parseInt(parts[0], 10);
        var month = parseInt(parts[1], 10) - 1; // th√°ng trong JS: 0-11
        var year = parseInt(parts[2], 10);
        if (year < 100) year += 2000; // convert 25 ‚Üí 2025
        return new Date(year, month, day);
        }
        return null;
        }

        // Trong v√≤ng l·∫∑p: N·∫øu ƒë√∫ng ƒë·ªãnh d·∫°ng Date th√¨ d√πng lu√¥n c√≤n kh√¥ng th√¨ convert sang DD/MM/YY
        if (!(startDate instanceof Date)) startDate = parseDate(startDate);
        if (!(endDate instanceof Date)) endDate = parseDate(endDate);
        
        if (!(startDate instanceof Date) || !(endDate instanceof Date)) {
          Logger.log('B·ªè qua h√†ng ' + (j + 1) + ': Ng√†y kh√¥ng h·ª£p l·ªá (Start: ' + startDate + ', End: ' + endDate + ')');
          continue;
        }
        
        endDate.setHours(0, 0, 0, 0);
        startDate.setHours(0, 0, 0, 0);
        
        // Ki·ªÉm tra tr·∫°ng th√°i m·∫∑c ƒë·ªãnh (b·ªè qua n·∫øu "Done")
        if (!conditions.includes('B·ªè qua n·∫øu') && taskStatus === 'Done') {
          Logger.log('B·ªè qua h√†ng ' + (j + 1) + ': Tr·∫°ng th√°i l√† "Done".');
          continue;
        }
        
        // Ki·ªÉm tra ƒëi·ªÅu ki·ªán b·ªè qua
        if (shouldSkip(taskRow, skipConditions)) {
          Logger.log('B·ªè qua h√†ng ' + (j + 1) + ': Kh√¥ng th·ªèa ƒëi·ªÅu ki·ªán b·ªè qua.');
          continue;
        }
        
        // Ki·ªÉm tra ƒëi·ªÅu ki·ªán ph·∫£i th·ªèa
        if (checkConditions.length > 0 && !shouldCheck(taskRow, checkConditions)) {
          Logger.log('B·ªè qua h√†ng ' + (j + 1) + ': Kh√¥ng th·ªèa ƒëi·ªÅu ki·ªán ki·ªÉm tra.');
          continue;
        }
        
        // T√≠nh ng√†y ƒë·∫øn h·∫°n
        var daysToEnd = Math.floor((endDate - today) / (1000 * 60 * 60 * 24));
        Logger.log('H√†ng ' + (j + 1) + ': Days to end = ' + daysToEnd);
        
        var alertReason = '';
        if (beforeDays > 0 && daysToEnd > 0 && daysToEnd <= beforeDays) {
          alertReason = '‚è≥ Due soon ( ' + beforeDays + ' ng√†y)'; //‚ÄúDue soon‚Äù kh√¥ng ch·ªâ b√°o ri√™ng cho ƒë√∫ng ng√†y tr∆∞·ªõc deadline, m√† bao g·ªìm t·∫•t c·∫£ ng√†y tr∆∞·ªõc ƒë√≥ trong kho·∫£ng beforeDays
        } else if (daysToEnd === 0) {
          alertReason = '‚ö†Ô∏è Due today';
        } else if (afterDays > 0 && daysToEnd === -afterDays) {
          alertReason = '‚õîÔ∏è Overdue (' + afterDays + ' ng√†y)';
        } else if (daysToEnd < 0) {
          alertReason = '‚õîÔ∏è Overdue';
        }
        
        if (alertReason) {
          //alerts.push(taskName + ': ' + alertReason + ' (End: ' + Utilities.formatDate(endDate, 'GMT+7', 'yyyy-MM-dd') + ', Status: ' + (taskStatus || 'N/A') + ')');
          alerts.push(alertReason + ' (End: ' + Utilities.formatDate(endDate, 'GMT+7', 'yyyy-MM-dd') + ', ' + (taskStatus || 'N/A') + '): ' + taskName);
          Logger.log('Th√™m c·∫£nh b√°o: ' + alerts[alerts.length - 1]);
        }
      }
      
      if (alerts.length > 0) {
        var subject = 'üö® Warning Plan: ' + targetSpreadsheet.getName();
        var body = 'C√°c task c·∫ßn ch√∫ √Ω:\n\n' + alerts.join('\n') + '\n\nLink file: ' + targetSpreadsheet.getUrl();
        //var body = 'C√°c task c·∫ßn ch√∫ √Ω:\n' 
         //+ alerts.map(task => '- ' + task).join('\n') 
         //+ '\n\nLink file: ' + targetSpreadsheet.getUrl();
        //var body = 'C√°c task c·∫ßn ch√∫ √Ω:\n'
        //  + alerts.map(task => '- ' + task).join('\n')
        //  + '\n\nLink file: ' + targetSpreadsheet.getUrl();

        Logger.log('Chu·∫©n b·ªã g·ª≠i c·∫£nh b√°o: Subject = ' + subject + ', Body = ' + body);
        
        // G·ª≠i qua Email
        if (sendMethod === 'email' || sendMethod === 'both') {
          validEmails.forEach(email => {
            try {
              MailApp.sendEmail(email, subject, body);
              Logger.log('G·ª≠i email th√†nh c√¥ng t·ªõi: ' + email);
            } catch (e) {
              Logger.log('L·ªñI khi g·ª≠i email t·ªõi ' + email + ': ' + e.message);
            }
          });
        }
        
        // G·ª≠i qua Telegram
        if (sendMethod === 'telegram' || sendMethod === 'both') {
          validChatIds.forEach(chatId => {
            try {
              var url = 'https://api.telegram.org/bot' + TELEGRAM_BOT_TOKEN + '/sendMessage';
              var payload = {
                chat_id: chatId,
                text: subject + '\n\n' + body
              };
              var options = {
                method: 'post',
                contentType: 'application/json',
                payload: JSON.stringify(payload)
              };
              var response = UrlFetchApp.fetch(url, options);
              Logger.log('G·ª≠i Telegram th√†nh c√¥ng t·ªõi Chat ID: ' + chatId + ', Response: ' + response.getContentText());
            } catch (e) {
              Logger.log('L·ªñI khi g·ª≠i Telegram t·ªõi Chat ID ' + chatId + ': ' + e.message);
            }
          });
        }
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i
        sentCount++;
        var newStatus = 'ƒê√£ g·ª≠i: ' + sentCount + ' l·∫ßn, l·∫ßn cu·ªëi: ' + Utilities.formatDate(today, 'GMT+7', 'yyyy-MM-dd');
        configSheet.getRange(i + 1, 15).setValue(newStatus);
        Logger.log('C·∫≠p nh·∫≠t tr·∫°ng th√°i h√†ng ' + (i + 1) + ': ' + newStatus);
      } else {
        Logger.log('H√†ng ' + (i + 1) + ': Kh√¥ng c√≥ task n√†o c·∫ßn c·∫£nh b√°o.');
      }
    } catch (e) {
      Logger.log('L·ªñI khi x·ª≠ l√Ω file ' + fileId + ': ' + e.message);
    }
  }
  Logger.log('K·∫øt th√∫c checkDeadlines.');
}

// Function to get config data
function getConfigData() {
  var configSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Config');
  if (!configSheet) {
    return { configData: [], alerts: [] };
  }
  
  var data = configSheet.getDataRange().getValues();
  var configData = data.slice(1); // B·ªè header
  var alerts = [];

  var today = new Date();
  today.setHours(0, 0, 0, 0);

  for (var i = 0; i < configData.length; i++) {
    var row = configData[i];
    var fileId = row[1].trim();
    var projectName = row[2].trim() || '';
    var sheetName = row[3].trim() || null;
    var taskNameColLetter = row[4].trim().toUpperCase();
    var startColLetter = row[5].trim().toUpperCase();
    var endColLetter = row[6].trim().toUpperCase();
    var statusColLetter = row[7].trim().toUpperCase();
    var recipients = row[8].trim().split(',').map(e => e.trim()).join(',');
    var sendMethod = row[9].trim().toLowerCase() || 'email';
    var maxAlerts = parseInt(row[10]) || 0;
    var beforeDays = parseInt(row[11]) || 0;
    var afterDays = parseInt(row[12]) || 0;
    var conditions = row[13].trim() || '';
    var status = row[14].trim() || 'ƒê√£ g·ª≠i: 0 l·∫ßn';
    var active = row[15].trim() || 'Yes';

    if (active !== 'Yes') continue; // Skip if not active

    var sentCount = parseInt(status.match(/ƒê√£ g·ª≠i: (\d+) l·∫ßn/)?.[1] || 0);
    if (sentCount >= maxAlerts && maxAlerts > 0) continue;

    try {
      var targetSpreadsheet = SpreadsheetApp.openById(fileId);
      var targetSheet = sheetName ? targetSpreadsheet.getSheetByName(sheetName) : targetSpreadsheet.getSheets()[0];
      if (!targetSheet) continue;

      var targetData = targetSheet.getDataRange().getValues();
      var taskNameColIndex = columnLetterToIndex(taskNameColLetter);
      var startColIndex = columnLetterToIndex(startColLetter);
      var endColIndex = columnLetterToIndex(endColLetter);
      var statusColIndex = statusColLetter ? columnLetterToIndex(statusColLetter) : 0;

      var rowRange = parseRowRange(conditions);
      var skipConditions = parseConditions(conditions, 'B·ªè qua n·∫øu');
      var checkConditions = parseConditions(conditions, 'Ki·ªÉm tra n·∫øu');

      for (var j = (rowRange[0] - 1); j < Math.min(rowRange[1], targetData.length); j++) {
        var taskRow = targetData[j];
        var taskName = taskNameColIndex ? taskRow[taskNameColIndex - 1] || 'Task ·ªü h√†ng ' + (j + 1) : 'Task ·ªü h√†ng ' + (j + 1);
        var startDate = taskRow[startColIndex - 1];
        var endDate = taskRow[endColIndex - 1];
        var taskStatus = statusColIndex ? taskRow[statusColIndex - 1] : '';

        if (!startDate || !endDate || !(startDate instanceof Date) || !(endDate instanceof Date)) continue;
        
        endDate.setHours(0, 0, 0, 0);
        startDate.setHours(0, 0, 0, 0);

        if (!conditions.includes('B·ªè qua n·∫øu') && taskStatus === 'Done') continue;
        if (shouldSkip(taskRow, skipConditions)) continue;
        if (checkConditions.length > 0 && !shouldCheck(taskRow, checkConditions)) continue;

        var daysToEnd = Math.floor((endDate - today) / (1000 * 60 * 60 * 24));
        var alertReason = '';
        if (beforeDays > 0 && daysToEnd === beforeDays) {
          alertReason = 'S·∫Øp ƒë·∫øn h·∫°n (tr∆∞·ªõc ' + beforeDays + ' ng√†y)';
        } else if (daysToEnd === 0) {
          alertReason = 'H√¥m nay l√† ng√†y h·∫øt h·∫°n';
        } else if (afterDays > 0 && daysToEnd === -afterDays) {
          alertReason = 'ƒê√£ tr·ªÖ h·∫°n (sau ' + afterDays + ' ng√†y)';
        } else if (daysToEnd < 0) {
          alertReason = 'ƒê√£ tr·ªÖ h·∫°n';
        }

        if (alertReason) {
          alerts.push(taskName + ': ' + alertReason + ' (End: ' + Utilities.formatDate(endDate, 'GMT+7', 'yyyy-MM-dd') + ', Status: ' + (taskStatus || 'N/A') + ') - File: ' + targetSpreadsheet.getName());
        }
      }
    } catch (e) {
      Logger.log('L·ªñI khi x·ª≠ l√Ω file ' + fileId + ': ' + e.message);
    }
  }

  return { configData: configData, alerts: alerts };
}

// Add new config
function addConfig(data) {
  var configSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Config');
  var lastRow = configSheet.getLastRow();
  var stt = lastRow > 1 ? parseInt(configSheet.getRange(lastRow, 1).getValue()) + 1 : 1;
  var newRow = [
    stt,
    data.fileId,
    data.projectName,
    data.sheetName,
    data.taskNameCol,
    data.startCol,
    data.endCol,
    data.statusCol,
    data.recipients,
    data.sendMethod,
    data.maxAlerts,
    data.beforeDays,
    data.afterDays,
    data.conditions,
    'ƒê√£ g·ª≠i: 0 l·∫ßn',
    'Yes',
    data.link
  ];
  configSheet.appendRow(newRow);
}

// Update config
// Update config
function updateConfig(index, data) {
  var configSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Config');
  var rowNum = index + 2; // Header + index
  if (!configSheet) {
    Logger.log('L·ªñI: Sheet "Config" kh√¥ng t·ªìn t·∫°i.');
    return;
  }

  // L·∫•y gi√° tr·ªã hi·ªán t·∫°i c·ªßa h√†ng ƒë·ªÉ gi·ªØ nguy√™n n·∫øu kh√¥ng thay ƒë·ªïi
  var currentRow = configSheet.getRange(rowNum, 1, 1, configSheet.getLastColumn()).getValues()[0];

  // C·∫≠p nh·∫≠t c√°c c·ªôt theo d·ªØ li·ªáu g·ª≠i l√™n
  configSheet.getRange(rowNum, 2).setValue(data.fileId || currentRow[1]); // File ID
  configSheet.getRange(rowNum, 3).setValue(data.projectName || currentRow[2]); // Project Name
  configSheet.getRange(rowNum, 4).setValue(data.sheetName || currentRow[3]); // Sheet Name
  configSheet.getRange(rowNum, 5).setValue(data.taskNameCol || currentRow[4]); // Task Name Col
  configSheet.getRange(rowNum, 6).setValue(data.startCol || currentRow[5]); // Start Date Col
  configSheet.getRange(rowNum, 7).setValue(data.endCol || currentRow[6]); // End Date Col
  configSheet.getRange(rowNum, 8).setValue(data.statusCol || currentRow[7]); // Status Col
  configSheet.getRange(rowNum, 9).setValue(data.recipients || currentRow[8]); // Recipients
  configSheet.getRange(rowNum, 10).setValue(data.sendMethod || currentRow[9]); // Send Method
  configSheet.getRange(rowNum, 11).setValue(data.maxAlerts || currentRow[10]); // Max Alerts
  configSheet.getRange(rowNum, 12).setValue(data.beforeDays || currentRow[11]); // Before Days
  configSheet.getRange(rowNum, 13).setValue(data.afterDays || currentRow[12]); // After Days
  configSheet.getRange(rowNum, 14).setValue(data.conditions || currentRow[13]); // Conditions
  configSheet.getRange(rowNum, 15).setValue(data.status || currentRow[14]); // Status
  configSheet.getRange(rowNum, 16).setValue(data.active || currentRow[15]); // Active (Yes/No)
  configSheet.getRange(rowNum, 17).setValue(data.link || currentRow[16]); // Link

  Logger.log('C·∫≠p nh·∫≠t h√†ng ' + rowNum + ' th√†nh c√¥ng: Active = ' + data.active + ', Link = ' + data.link);
}
// Toggle active
function toggleActive(index) {
  var configSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Config');
  var rowNum = index + 2;
  var currentActive = configSheet.getRange(rowNum, 16).getValue();
  configSheet.getRange(rowNum, 16).setValue(currentActive === 'Yes' ? 'No' : 'Yes');
}

// Helper functions
function columnLetterToIndex(letter) {
  return letter ? letter.charCodeAt(0) - 64 : 0;
}

function parseRowRange(conditions) {
  var match = conditions.match(/h√†ng t·ª´ (\d+) ƒë·∫øn (\d+)/);
  return match ? [parseInt(match[1]), parseInt(match[2])] : [2, 9999];
}

function parseConditions(conditions, prefix) {
  var regex = new RegExp(prefix + ' c·ªôt (\\w+) = "([^"]+)"', 'gi');
  var conds = [];
  var match;
  while ((match = regex.exec(conditions)) !== null) {
    conds.push({col: match[1].toUpperCase(), val: match[2]});
  }
  return conds;
}

function shouldSkip(row, skipConditions) {
  for (var cond of skipConditions) {
    var colIndex = columnLetterToIndex(cond.col);
    if (colIndex && row[colIndex - 1] === cond.val) return true;
  }
  return false;
}

function shouldCheck(row, checkConditions) {
  for (var cond of checkConditions) {
    var colIndex = columnLetterToIndex(cond.col);
    if (colIndex && row[colIndex - 1] === cond.val) return true;
  }
  return false;
}
function checkAlerts(index) {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Config");
  var data = sheet.getDataRange().getValues();
  var configRow = data[index + 1]; // +1 because index 0 is header
  var fileId = configRow[1]; // File ID
  var sheetName = configRow[3]; // Sheet Name
  var endCol = configRow[6].charCodeAt(0) - 64; // Convert column letter to index (e.g., 'G' -> 7)
  var taskNameCol = configRow[4].charCodeAt(0) - 64; // Task Name column
  var targetSheet = SpreadsheetApp.openById(fileId).getSheetByName(sheetName);
  var taskData = targetSheet.getDataRange().getValues();
  var alerts = [];
  for (var i = 1; i < taskData.length; i++) {
    var endDate = new Date(taskData[i][endCol - 1]); // -1 because column index is 1-based
    var today = new Date();
    var diffDays = Math.ceil((endDate - today) / (1000 * 60 * 60 * 24));
    if (diffDays <= 1 && diffDays >= 0) {
      alerts.push(taskData[i][taskNameCol - 1] + ' S·∫Øp ƒë·∫øn h·∫°n (tr∆∞·ªõc 1 ng√†y)');
    } else if (diffDays < 0) {
      alerts.push(taskData[i][taskNameCol - 1] + ' ƒê√£ tr·ªÖ h·∫°n');
    }
  }
  return alerts;
}
